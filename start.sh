#!/bin/bash

# Development Startup Script for SPY TA Tracker
# This script starts both frontend and backend services
# Generated by Agent OS to prevent setup amnesia

set -e  # Exit on error

echo "🚀 Starting SPY TA Tracker Development Environment"
echo "================================================="

# Load environment variables
if [ -f .env ]; then
    echo "📋 Loading backend environment from .env"
    set -a  # automatically export all variables
    source .env
    set +a  # turn off auto-export
fi

if [ -f .env.local ]; then
    echo "📋 Loading frontend environment from .env.local"
    set -a  # automatically export all variables
    source .env.local
    set +a  # turn off auto-export
fi

# Force frontend API base to same-origin in dev so Vite proxy handles API (avoids CORS/IPv6 issues)
export VITE_API_URL="/"

# Also load backend/.env if present (commonly used for DATABASE_URL)
if [ -f backend/.env ]; then
    echo "📋 Loading backend environment from backend/.env"
    set -a
    source backend/.env
    set +a
fi

# Ensure local Postgres is used for dev
# Use 5433 on host to avoid conflicts with any host Postgres
DEFAULT_DB_URL="postgresql+psycopg2://spy:pass@127.0.0.1:5433/spy"
export DATABASE_URL="$DEFAULT_DB_URL"
echo "🧩 Using dev DATABASE_URL=$DATABASE_URL"

# Auto-start a local Postgres container named 'spydb' when using localhost and Docker is available
if echo "$DATABASE_URL" | grep -qE "127\.0\.0\.1:5433|localhost:5433"; then
    if command -v docker >/dev/null 2>&1; then
        if ! docker info >/dev/null 2>&1; then
            echo "⚠️  Docker is installed but not running; skipping auto-start of Postgres."
        else
            if [ -z "$(docker ps -q -f name=^/spydb$)" ]; then
                if [ -z "$(docker ps -aq -f name=^/spydb$)" ]; then
                    echo "🐘 Starting local Postgres container 'spydb' (first run)..."
                    docker run --name spydb -d \
                      -e POSTGRES_USER=spy -e POSTGRES_PASSWORD=pass -e POSTGRES_DB=spy \
                      -p 5433:5432 postgres:16 >/dev/null
                else
                    echo "🐘 Starting existing Postgres container 'spydb'..."
                    docker start spydb >/dev/null
                fi
            else
                echo "🐘 Local Postgres container 'spydb' already running."
            fi
        fi
    else
        echo "ℹ️  Docker not found; assuming Postgres is provided externally at $DATABASE_URL"
    fi
fi

# Get ports from environment or use defaults
BACKEND_PORT=${API_PORT:-8000}
FRONTEND_PORT=${PORT:-3000}

echo ""
echo "📡 Starting Backend Server on port $BACKEND_PORT..."

# Check if backend directory exists
if [ -d "backend" ]; then
    cd backend
    
    # Check if virtual environment exists
    if [ -d ".venv" ]; then
        echo "   Activating Python virtual environment..."
        source .venv/bin/activate
    else
        echo "⚠️  Virtual environment not found. Creating one..."
        uv venv
        source .venv/bin/activate
    fi
    
    # Install/update dependencies (prefer pyproject via uv)
    if [ -f "pyproject.toml" ]; then
        echo "   Installing/updating Python dependencies from pyproject.toml..."
        uv pip install -r pyproject.toml
    elif [ -f "requirements.txt" ]; then
        echo "   Installing/updating Python dependencies from requirements.txt..."
        uv pip install -r requirements.txt
    fi
    
    # Start backend server in background
    echo "   Starting FastAPI server..."
    uvicorn app.main:app --reload --port $BACKEND_PORT &
    BACKEND_PID=$!
    
    cd ..
else
    echo "❌ Backend directory not found!"
    exit 1
fi

echo ""
echo "🎨 Starting Frontend Server on port $FRONTEND_PORT..."

# Check if package.json exists (frontend directory)
if [ -f "package.json" ]; then
    # Install/update dependencies
    echo "   Installing/updating Node.js dependencies..."
    yarn install
    
    # Start frontend server in background  
    echo "   Starting Vite development server..."
    yarn dev &
    FRONTEND_PID=$!
else
    echo "❌ Frontend package.json not found!"
    kill $BACKEND_PID 2>/dev/null || true
    exit 1
fi

echo ""
echo "✅ Development servers started!"
echo "   Frontend: http://localhost:$FRONTEND_PORT"
echo "   Backend:  http://localhost:$BACKEND_PORT"
echo "   API Docs: http://localhost:$BACKEND_PORT/docs"
echo ""
echo "📱 SPY TA Tracker Features:"
echo "   • Morning prediction form (sub-60s entry)"
echo "   • Manual price capture (tap-to-log tiles)" 
echo "   • Real-time chart visualization"
echo "   • Prediction vs actual price tracking"
echo ""
echo "Press Ctrl+C to stop all services"

# Function to cleanup background processes
cleanup() {
    echo ""
    echo "🛑 Shutting down development servers..."
    kill $BACKEND_PID 2>/dev/null || true
    kill $FRONTEND_PID 2>/dev/null || true
    echo "✅ All services stopped"
    exit 0
}

# Trap Ctrl+C and call cleanup
trap cleanup INT

# Wait for background processes
wait